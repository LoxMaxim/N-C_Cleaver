[{"name":"app.R","content":"# Load the required packages\r\nlibrary(shiny)\r\nlibrary(clipr)\r\n\r\n# Amino acid monoisotopic masses (in Daltons)\r\naa_masses <- c(\r\n  A = 71.03711,  C = 103.00919, D = 115.02694, E = 129.04259, F = 147.06841,\r\n  G = 57.02146,  H = 137.05891, I = 113.08406, K = 128.09496, L = 113.08406,\r\n  M = 131.04049, N = 114.04293, P = 97.05276,  Q = 128.05858, R = 156.10111,\r\n  S = 87.03203,  T = 101.04768, V = 99.06841,  W = 186.07931, Y = 163.06333\r\n)\r\n\r\n# pKa values for amino acids and termini\r\npKa <- list(\r\n  Nterm = 9.69, Cterm = 2.34,\r\n  R = 12.48, K = 10.54, H = 6.04,\r\n  D = 3.90, E = 4.07, C = 8.37, Y = 10.46\r\n)\r\n\r\n# Function to calculate the molecular weight of a peptide\r\ncalculate_weight <- function(peptide) {\r\n  weight <- sum(aa_masses[strsplit(peptide, NULL)[[1]]])\r\n  return(weight)\r\n}\r\n\r\n# Function to calculate the pI of a peptide\r\ncalculate_pI <- function(peptide) {\r\n  aa_counts <- table(strsplit(peptide, NULL)[[1]])\r\n  \r\n  # Calculate net charge at a given pH\r\n  net_charge <- function(pH) {\r\n    charge <- 10^(pKa$Nterm - pH) / (1 + 10^(pKa$Nterm - pH)) - \r\n      10^(pH - pKa$Cterm) / (1 + 10^(pH - pKa$Cterm))\r\n    if (\"R\" %in% names(aa_counts)) charge <- charge + aa_counts[\"R\"] * 10^(pKa$R - pH) / (1 + 10^(pKa$R - pH))\r\n    if (\"K\" %in% names(aa_counts)) charge <- charge + aa_counts[\"K\"] * 10^(pKa$K - pH) / (1 + 10^(pKa$K - pH))\r\n    if (\"H\" %in% names(aa_counts)) charge <- charge + aa_counts[\"H\"] * 10^(pKa$H - pH) / (1 + 10^(pKa$H - pH))\r\n    if (\"D\" %in% names(aa_counts)) charge <- charge - aa_counts[\"D\"] * 10^(pH - pKa$D) / (1 + 10^(pH - pKa$D))\r\n    if (\"E\" %in% names(aa_counts)) charge <- charge - aa_counts[\"E\"] * 10^(pH - pKa$E) / (1 + 10^(pH - pKa$E))\r\n    if (\"C\" %in% names(aa_counts)) charge <- charge - aa_counts[\"C\"] * 10^(pH - pKa$C) / (1 + 10^(pH - pKa$C))\r\n    if (\"Y\" %in% names(aa_counts)) charge <- charge - aa_counts[\"Y\"] * 10^(pH - pKa$Y) / (1 + 10^(pH - pKa$Y))\r\n    return(charge)\r\n  }\r\n  \r\n  # Estimate pI by finding the pH where net charge is zero\r\n  pH1 <- 0\r\n  pH2 <- 14\r\n  while (pH2 - pH1 > 0.01) {\r\n    pH_mid <- (pH1 + pH2) / 2\r\n    if (net_charge(pH_mid) > 0) {\r\n      pH1 <- pH_mid\r\n    } else {\r\n      pH2 <- pH_mid\r\n    }\r\n  }\r\n  return((pH1 + pH2) / 2)\r\n}\r\n\r\n# Function to generate all N-terminal fragments and their weights and pI\r\ngenerate_N_terminal_fragments <- function(protein_sequence) {\r\n  n <- nchar(protein_sequence)\r\n  n_terminal_fragments <- character(n)\r\n  n_terminal_weights <- numeric(n)\r\n  n_terminal_pIs <- numeric(n)\r\n  for (i in 1:n) {\r\n    fragment <- substr(protein_sequence, 1, i)\r\n    n_terminal_fragments[i] <- fragment\r\n    n_terminal_weights[i] <- calculate_weight(fragment)\r\n    n_terminal_pIs[i] <- calculate_pI(fragment)\r\n  }\r\n  return(data.frame(Fragment = n_terminal_fragments, Weight = n_terminal_weights, pI = n_terminal_pIs))\r\n}\r\n\r\n# Function to generate all C-terminal fragments and their weights and pI\r\ngenerate_C_terminal_fragments <- function(protein_sequence) {\r\n  n <- nchar(protein_sequence)\r\n  c_terminal_fragments <- character(n)\r\n  c_terminal_weights <- numeric(n)\r\n  c_terminal_pIs <- numeric(n)\r\n  for (i in 1:n) {\r\n    fragment <- substr(protein_sequence, i, n)\r\n    c_terminal_fragments[i] <- fragment\r\n    c_terminal_weights[i] <- calculate_weight(fragment)\r\n    c_terminal_pIs[i] <- calculate_pI(fragment)\r\n  }\r\n  return(data.frame(Fragment = c_terminal_fragments, Weight = c_terminal_weights, pI = c_terminal_pIs))\r\n}\r\n\r\n# Define UI\r\nui <- fluidPage(\r\n  titlePanel(\"Protein Sequence Fragment Generator\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      textInput(\"sequence\", \"Enter Protein Sequence:\", \"\"),\r\n      actionButton(\"generate\", \"Generate Fragments\"),\r\n      actionButton(\"copy\", \"Copy to Clipboard\")\r\n    ),\r\n    mainPanel(\r\n      tableOutput(\"fragments_table\")\r\n    )\r\n  )\r\n)\r\n\r\n# Define server logic\r\nserver <- function(input, output, session) {\r\n  fragments_df <- reactiveVal(data.frame())\r\n  \r\n  observeEvent(input$generate, {\r\n    req(input$sequence)\r\n    protein_sequence <- input$sequence\r\n    n_terminal_data <- generate_N_terminal_fragments(protein_sequence)\r\n    c_terminal_data <- generate_C_terminal_fragments(protein_sequence)\r\n    \r\n    df <- data.frame(\r\n      N_Terminal_Fragment = n_terminal_data$Fragment,\r\n      N_Terminal_Weight = n_terminal_data$Weight,\r\n      N_Terminal_pI = n_terminal_data$pI,\r\n      C_Terminal_Fragment = c_terminal_data$Fragment,\r\n      C_Terminal_Weight = c_terminal_data$Weight,\r\n      C_Terminal_pI = c_terminal_data$pI,\r\n      stringsAsFactors = FALSE\r\n    )\r\n    \r\n    fragments_df(df)\r\n  })\r\n  \r\n  observeEvent(input$copy, {\r\n    req(fragments_df())\r\n    write_clip(fragments_df())\r\n    showNotification(\"Copied to clipboard!\")\r\n  })\r\n  \r\n  output$fragments_table <- renderTable({\r\n    fragments_df()\r\n  })\r\n}\r\n\r\n# Run the application\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
