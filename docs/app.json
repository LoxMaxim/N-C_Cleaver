[{"name":"app.R","content":"library(shiny)\r\n\r\n# ---- Amino acid data ----\r\naa_masses <- c(\r\n  A = 71.03711,  C = 103.00919, D = 115.02694, E = 129.04259, F = 147.06841,\r\n  G = 57.02146,  H = 137.05891, I = 113.08406, K = 128.09496, L = 113.08406,\r\n  M = 131.04049, N = 114.04293, P = 97.05276,  Q = 128.05858, R = 156.10111,\r\n  S = 87.03203,  T = 101.04768, V = 99.06841,  W = 186.07931, Y = 163.06333\r\n)\r\n\r\npKa <- list(\r\n  Nterm = 9.69, Cterm = 2.34,\r\n  R = 12.48, K = 10.54, H = 6.04,\r\n  D = 3.90, E = 4.07, C = 8.37, Y = 10.46\r\n)\r\n\r\n# ---- Calculation functions ----\r\ncalculate_weight <- function(peptide) {\r\n  sum(aa_masses[strsplit(peptide, NULL)[[1]]])\r\n}\r\n\r\ncalculate_pI <- function(peptide) {\r\n  aa_counts <- table(strsplit(peptide, NULL)[[1]])\r\n  net_charge <- function(pH) {\r\n    charge <- 10^(pKa$Nterm - pH) / (1 + 10^(pKa$Nterm - pH)) -\r\n      10^(pH - pKa$Cterm) / (1 + 10^(pH - pKa$Cterm))\r\n    for (res in names(aa_counts)) {\r\n      n <- aa_counts[res]\r\n      if (res %in% c(\"R\", \"K\", \"H\")) {\r\n        charge <- charge + n * 10^(pKa[[res]] - pH) / (1 + 10^(pKa[[res]] - pH))\r\n      }\r\n      if (res %in% c(\"D\", \"E\", \"C\", \"Y\")) {\r\n        charge <- charge - n * 10^(pH - pKa[[res]]) / (1 + 10^(pH - pKa[[res]]))\r\n      }\r\n    }\r\n    charge\r\n  }\r\n  pH_low <- 0\r\n  pH_high <- 14\r\n  while (pH_high - pH_low > 0.01) {\r\n    pH_mid <- (pH_low + pH_high) / 2\r\n    if (net_charge(pH_mid) > 0) {\r\n      pH_low <- pH_mid\r\n    } else {\r\n      pH_high <- pH_mid\r\n    }\r\n  }\r\n  (pH_low + pH_high) / 2\r\n}\r\n\r\ngenerate_N_terminal_fragments <- function(seq) {\r\n  n <- nchar(seq)\r\n  data.frame(\r\n    Fragment = sapply(1:n, function(i) substr(seq, 1, i)),\r\n    Weight = sapply(1:n, function(i) calculate_weight(substr(seq, 1, i))),\r\n    pI = sapply(1:n, function(i) calculate_pI(substr(seq, 1, i))),\r\n    stringsAsFactors = FALSE\r\n  )\r\n}\r\n\r\ngenerate_C_terminal_fragments <- function(seq) {\r\n  n <- nchar(seq)\r\n  data.frame(\r\n    Fragment = sapply(1:n, function(i) substr(seq, i, n)),\r\n    Weight = sapply(1:n, function(i) calculate_weight(substr(seq, i, n))),\r\n    pI = sapply(1:n, function(i) calculate_pI(substr(seq, i, n))),\r\n    stringsAsFactors = FALSE\r\n  )\r\n}\r\n\r\n# ---- UI ----\r\nui <- fluidPage(\r\n  titlePanel(\"Protein Fragment Generator\"),\r\n  sidebarLayout(\r\n    sidebarPanel(\r\n      textInput(\"sequence\", \"Enter Protein Sequence:\", \"\"),\r\n      actionButton(\"generate\", \"Generate Fragments\"),\r\n      actionButton(\"copy\", \"Copy Table to Clipboard\", onclick = \"copyTableToClipboard()\"),\r\n      tags$script(HTML(\"\r\n        function copyTableToClipboard() {\r\n          var table = document.getElementById('fragment_table');\r\n          if (!table) {\r\n            alert('Table not found.');\r\n            return;\r\n          }\r\n          var range = document.createRange();\r\n          range.selectNode(table);\r\n          var sel = window.getSelection();\r\n          sel.removeAllRanges();\r\n          sel.addRange(range);\r\n          try {\r\n            document.execCommand('copy');\r\n            sel.removeAllRanges();\r\n            alert('Copied to clipboard!');\r\n          } catch (err) {\r\n            alert('Failed to copy: ' + err);\r\n          }\r\n        }\r\n      \"))\r\n    ),\r\n    mainPanel(\r\n      htmlOutput(\"table_html\")  # <- this is where we'll insert a full HTML table\r\n    )\r\n  )\r\n)\r\n\r\n# ---- Server ----\r\nserver <- function(input, output, session) {\r\n  fragments_df <- reactiveVal()\r\n  \r\n  observeEvent(input$generate, {\r\n    req(input$sequence)\r\n    seq <- toupper(gsub(\"[^ACDEFGHIKLMNPQRSTVWY]\", \"\", input$sequence))\r\n    n_data <- generate_N_terminal_fragments(seq)\r\n    c_data <- generate_C_terminal_fragments(seq)\r\n    \r\n    df <- data.frame(\r\n      N_Fragment = n_data$Fragment,\r\n      N_Weight = round(n_data$Weight, 2),\r\n      N_pI = round(n_data$pI, 2),\r\n      C_Fragment = c_data$Fragment,\r\n      C_Weight = round(c_data$Weight, 2),\r\n      C_pI = round(c_data$pI, 2),\r\n      stringsAsFactors = FALSE\r\n    )\r\n    fragments_df(df)\r\n  })\r\n  \r\n  output$table_html <- renderUI({\r\n    req(fragments_df())\r\n    df <- fragments_df()\r\n    \r\n    # Build HTML table manually with ID\r\n    header <- paste0(\"<tr>\", paste0(\"<th>\", names(df), \"<\/th>\", collapse = \"\"), \"<\/tr>\")\r\n    rows <- apply(df, 1, function(row) {\r\n      paste0(\"<tr>\", paste0(\"<td>\", row, \"<\/td>\", collapse = \"\"), \"<\/tr>\")\r\n    })\r\n    HTML(paste0(\"<table id='fragment_table' class='table table-bordered table-sm'>\", header, paste(rows, collapse = \"\"), \"<\/table>\"))\r\n  })\r\n}\r\n\r\n# ---- Run App ----\r\nshinyApp(ui = ui, server = server)\r\n","type":"text"}]
